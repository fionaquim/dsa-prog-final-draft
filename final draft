using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace ZITA_FINALS
{
    class Program
    {
        static void Main(string[] args)
        {
            // i used char to manipulate my alphabet table more efficiently
            char[,] Table = new char[26, 26];
            for (int i = 0; i < 26; i++) // outer loop rows
            {
                for (int j = 0; j < 26; j++) // inner loop columns
                {
                    Table[i, j] = (char)('A' + (i + j) % 26); // calculates char to put in the cell
                }
            }

            while (true)
            {
                Console.ForegroundColor = ConsoleColor.Magenta;
                Console.WriteLine("S E L E C T  O N E");
                Console.WriteLine("\n[E] ENCRYPT \n[D] DECRYPT \n[Q] QUIT \n");
                Console.ForegroundColor = ConsoleColor.Cyan;
                char choice = Char.ToUpper(Console.ReadKey().KeyChar);
                Console.WriteLine();


                if (choice == 'Q')
                {
                    Console.WriteLine("Exiting the program, thank you for using...");
                    break;
                }
                else if (choice != 'E' && choice != 'D')
                {
                    Console.ForegroundColor = ConsoleColor.DarkRed;
                    Console.WriteLine("Invalid choice! Please select E, D, or Q to quit.");
                    continue;
                }

                // Get the message from the user
                Console.ForegroundColor = ConsoleColor.DarkMagenta;
                Console.WriteLine("Enter the message:");
                string message = Console.ReadLine().ToUpper();

                // Get the key either from file or manually
                Console.WriteLine("Do you want to (R)ead the key from a file or (I)nput the key manually?");
                char keyChoice = Char.ToUpper(Console.ReadKey().KeyChar); // converts message to uppercase
                Console.WriteLine();

                // creates an empty string to hold e/d
                string key = string.Empty;

                if (keyChoice == 'R')
                {
                    string keyFilePath = "encryptkey.txt"; // Assuming the key file is in the same directory as the executable
                    try
                    {
                        using (StreamReader sr = new StreamReader(keyFilePath)) // opens filepath
                        {
                            key = sr.ReadToEnd().ToUpper(); // Read all contents of the file and convert to uppercase
                        }
                    }
                    catch (FileNotFoundException)
                    {
                        Console.ForegroundColor = ConsoleColor.DarkRed;
                        Console.WriteLine("Key file not found! Please ensure 'encryptkey.txt' is in the correct directory.");
                        continue; // Skip the rest of the loop and ask for input again
                    }
                    catch (Exception ex)
                    {
                        Console.ForegroundColor = ConsoleColor.DarkRed;
                        Console.WriteLine("An error occurred while reading the key file: " + ex.Message);
                        continue; // Skip the rest of the loop and ask for input again
                    }
                }
                else if (keyChoice == 'I')
                {
                    Console.WriteLine("Enter the key:");
                    key = Console.ReadLine().ToUpper();
                }
                else
                {
                    Console.WriteLine("Invalid choice! Please select R to read from file or I to input manually.");
                    continue;
                }

                // Prepare the key to match the length of the message
                int keyLength = key.Length; 
                for (int i = keyLength; i < message.Length; i++) // it populates until it is less than the message loop
                {
                    key += key[i % keyLength]; // Extends the key to match the message length
                }
                //takes the char from the original key and appends it, it repeats until key is long as the message
                
                // Display the alphabet table
                Console.ForegroundColor = ConsoleColor.DarkCyan;
                Console.WriteLine("\nAlphabet Table:");
                for (int i = 0; i < 26; i++)
                {
                    for (int j = 0; j < 26; j++)
                    {
                        Console.Write(Table[i, j] + " ");
                    }
                    Console.WriteLine();
                }
                Console.WriteLine();

                // Encrypt or Decrypt the message
                // 'A' serves as the baseline, A in ascii is 65
                char[] result = new char[message.Length]; // creates an array to store the result
                for (int i = 0; i < message.Length; i++)
                {
                    if (char.IsLetter(message[i])) //checks if current char is letter
                    {
                        if (choice == 'E') // Encrypt the message
                        {
                            int row = message[i] - 'A'; // Calculates row index by converting char to its position in the table
                            int col = key[i] - 'A'; // subtracts A from the key, then converts to the index
                            result[i] = Table[row, col];
                        }
                        else // Decrypt the message
                        {
                            int col = key[i] - 'A'; // Subtracting 'A' from key[i] converts the key character to its index 
                            for (int row = 0; row < 26; row++) // loops hanggang mahanap correct row
                            {
                                if (Table[row, col] == message[i]) // checks if it matches the current char in the message
                                {
                                    result[i] = (char)('A' + row); // converts
                                    break;
                                }
                            }
                        }
                    }
                    else
                    {
                        result[i] = message[i]; // Non-letter characters remain unchanged
                    }
                }

                // Display the result
                string resultMessage = choice == 'E' ? "Encrypted message: " : "Decrypted message: ";
                string resultText = new string(result);
                Console.WriteLine(resultMessage);
                Console.WriteLine(resultText);

                // Append the result to output.txt
                try
                {
                    using (StreamWriter sw = new StreamWriter("output.txt", true)) // Open the file in append mode
                    {
                        sw.WriteLine(resultMessage + resultText); // Write the result to the file
                    }
                }
                catch (Exception ex)
                {
                    Console.ForegroundColor = ConsoleColor.DarkRed;
                    Console.WriteLine("An error occurred while writing to the output file: " + ex.Message);
                }

            }
        }
    }

}
