using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace ZITA_FINALS
{
    class Program
    {
        static void Main(string[] args)
        {
            
            char[,] Table = new char[26, 26];
            for (int i = 0; i < 26; i++) // outer loop rows
            {
                for (int j = 0; j < 26; j++) // inner loop columns
                {
                    Table[i, j] = (char)('A' + (i + j) % 26); // calculates char to put in the cell
                }
            }

            while (true)
            {
                Console.ForegroundColor = ConsoleColor.Magenta;
                Console.WriteLine("\n████████╗ █████╗ ██████╗ ██╗     ███████╗     ██████╗ ███████╗    ██╗     ███████╗████████╗████████╗███████╗██████╗ ███████╗\n╚══██╔══╝██╔══██╗██╔══██╗██║     ██╔════╝    ██╔═══██╗██╔════╝    ██║     ██╔════╝╚══██╔══╝╚══██╔══╝██╔════╝██╔══██╗██╔════╝\n   ██║   ███████║██████╔╝██║     █████╗      ██║   ██║█████╗      ██║     █████╗     ██║      ██║   █████╗  ██████╔╝███████╗\n   ██║   ██╔══██║██╔══██╗██║     ██╔══╝      ██║   ██║██╔══╝      ██║     ██╔══╝     ██║      ██║   ██╔══╝  ██╔══██╗╚════██║\n   ██║   ██║  ██║██████╔╝███████╗███████╗    ╚██████╔╝██║         ███████╗███████╗   ██║      ██║   ███████╗██║  ██║███████║\n   ╚═╝   ╚═╝  ╚═╝╚═════╝ ╚══════╝╚══════╝     ╚═════╝ ╚═╝         ╚══════╝╚══════╝   ╚═╝      ╚═╝   ╚══════╝╚═╝  ╚═╝╚══════╝\n                                                                                                                            \n");
                Console.WriteLine("S E L E C T  O N E");
                Console.WriteLine("\n[E] ENCRYPT \n[D] DECRYPT \n[Q] QUIT \n");
                Console.ForegroundColor = ConsoleColor.Cyan;
                char choice = Char.ToUpper(Console.ReadKey().KeyChar);
                Console.WriteLine();


                if (choice == 'Q')
                {
                    Console.WriteLine("Exiting the program, thank you for using...");
                    break;
                }
                else if (choice != 'E' && choice != 'D')
                {
                    Console.ForegroundColor = ConsoleColor.DarkRed;
                    Console.WriteLine("Invalid choice! Please select E, D, or Q to quit.");
                    continue;
                }
                Console.WriteLine(choice == 'E' ? "YOU HAVE CHOSEN ENCRYPTION" : "YOU HAVE CHOSEN DECRYPTION");


                Console.ForegroundColor = ConsoleColor.DarkMagenta;
                Console.WriteLine("Enter the message:");
                string message = Console.ReadLine().ToUpper();

                
                Console.WriteLine("Do you want to (R)ead the key from a file or (I)nput the key manually?");
                char keyChoice = Char.ToUpper(Console.ReadKey().KeyChar);
                Console.WriteLine();

               
                string key = string.Empty;

                if (keyChoice == 'R')
                {
                    string keyFilePath = "encryptkey.txt"; 
                    try
                    {
                        using (StreamReader sr = new StreamReader(keyFilePath)) 
                        {
                            key = sr.ReadToEnd().ToUpper(); 
                        }
                    }
                    catch (FileNotFoundException)
                    {
                        Console.ForegroundColor = ConsoleColor.DarkRed;
                        Console.WriteLine("Key file not found! Please ensure 'encryptkey.txt' is in the correct directory.");
                        continue; 
                    }
                    catch (Exception ex)
                    {
                        Console.ForegroundColor = ConsoleColor.DarkRed;
                        Console.WriteLine("An error occurred while reading the key file: " + ex.Message);
                        continue; 
                    }
                }
                else if (keyChoice == 'I')
                {
                    Console.WriteLine("Enter the key:");
                    key = Console.ReadLine().ToUpper().Replace(" ", "");
                }
                else
                {
                    Console.WriteLine("Invalid choice! Please select R to read from file or I to input manually.");
                    continue;
                }

                // Prepare the key to match the length of the message
                int keyLength = key.Length; 
                for (int i = keyLength; i < message.Length; i++) // it populates until it is less than the message loop
                {
                    key += key[i % keyLength]; // Extends the key to match the message length
                }
                // takes the char from the original key and appends it, it repeats until key is long as the message
                
                
                Console.ForegroundColor = ConsoleColor.DarkCyan;
                Console.WriteLine("\nAlphabet Table:");
                for (int i = 0; i < 26; i++)
                {
                    for (int j = 0; j < 26; j++)
                    {
                        Console.Write(Table[i, j] + " ");
                    }
                    Console.WriteLine();
                }
                Console.WriteLine();

                char[] result = new char[message.Length]; // creates an array to store the result
                for (int i = 0; i < message.Length; i++)
                {
                    if (char.IsLetter(message[i])) 
                    {
                        if (choice == 'E') 
                        {
                            int row = message[i] - 'A'; // Calculates row index by converting char to its position in the table
                            int col = key[i] - 'A'; // subtracts A from the key
                            result[i] = Table[row, col];
                        }
                        else 
                        {
                            int col = key[i] - 'A'; // Subtracting 'A' from key[i] converts the key character to its index 
                            for (int row = 0; row < 26; row++) // loops hanggang mahanap correct row
                            {
                                if (Table[row, col] == message[i]) 
                                {
                                    result[i] = (char)('A' + row);
                                    break;
                                }
                            }
                        }
                    }
                    else
                    {
                        result[i] = message[i]; 
                    }
                }

                string resultMessage = choice == 'E' ? "Encrypted message: " : "Decrypted message: ";
                string resultText = new string(result);
                Console.WriteLine(resultMessage);
                Console.WriteLine(resultText);

                try
                {
                    using (StreamWriter sw = new StreamWriter("output.txt", true)) 
                    {
                        sw.WriteLine(resultMessage + resultText); 
                    }
                }
                catch (Exception ex)
                {
                    Console.ForegroundColor = ConsoleColor.DarkRed;
                    Console.WriteLine("An error occurred while writing to the output file: " + ex.Message);
                }

            }
        }
    }

}
